/* Boundary condition */
real uIn = 0.0;
func dudnExactFunc1 = 2 * sin(2 * x);  /* du/dn for right and left outer borders*/
func dudnExactFunc2 = 2 * sin(2 * y); /* du/dn for up and down outer borders*/

func f = 8 * sin(2 * x) * sin(2 * y);  /* right side of the Poisson equation*/

/* Mesh definition */
int NN = 50*2*2;

int labelIn = 1; /* label of inner square */
int labelOutRight = 2; /* label of outter right side of square */
int labelOutUp = 3; /* label of outter up side of square */
int labelOutLeft = 4; /* label of outter left side of square */
int labelOutDown = 5; /* label of outter down side of square */


/* Outer border definition */
border DownOut(t = 0,1){x = 2 * pi * t; y = 0; label = labelOutDown;} 
border RightOut(t = 0,1){x = 2 * pi; y = 2 * pi * t; label = labelOutRight;}
border UpOut(t = 0,1){x = 2 * pi - 2 * pi * t; y = 2 * pi; label = labelOutUp;}
border LeftOut(t = 0,1){x = 0; y = 2 * pi - 2 * pi * t; label = labelOutLeft;}

/* Inner border definition */
border LeftIn(t = 0,1){x = pi / 2; y = pi / 2 + pi * t; label = labelIn; }
border UpIn(t = 0,1){x = pi / 2 + pi * t; y = 3 * pi / 2;  label = labelIn; }
border RightIn(t = 0,1){x = 3 * pi / 2; y = 3 * pi / 2 - pi * t;  label = labelIn; }
border DownIn(t = 0,1){x = 3 * pi / 2 - pi * t; y = pi / 2;  label = labelIn; }

mesh Th = buildmesh(DownOut(NN) + RightOut(NN) + UpOut(NN) + LeftOut(NN)+ LeftIn(NN) + UpIn(NN) + RightIn(NN) + DownIn(NN));

real error = 0.01;

fespace Vh(Th, P1);

func uExactFunc = sin(2 * x) * sin(2 * y);
Vh uExact = uExactFunc;

Vh u, v; 

/* Bilinear form definition */
varf LaplaceBilinearForm(u,v) =
	int2d(Th)(
		dx(u) * dx(v) + dy(u) * dy(v)
		)
		+ on(labelIn, u = uIn);

/* Linear form definition */
varf RhsLinearForm(u,v) = 
	int2d(Th)(
	f * v)
		+int1d(Th, labelOutUp)(dudnExactFunc1 * v) /* Sign of integral depends on the sign of normal */
		-int1d(Th, labelOutDown)(dudnExactFunc1 * v) 
		-int1d(Th, labelOutLeft)(dudnExactFunc2 * v)
		+int1d(Th, labelOutRight)(dudnExactFunc2 * v)
		+ on(labelIn, u = uIn);

matrix A = LaplaceBilinearForm(Vh, Vh);
real[int] b = RhsLinearForm(0, Vh);
u[] = A^-1 * b; /*SLAE solution*/

real hmin = 0.01;
real hmax = 0.1;

for (int i = 0; i < 4; i++){

error = error/2.0;

Th = adaptmesh(Th, u, err=error,hmin = hmin, hmax = hmax ,nbvx = 100000);

fespace Vh1(Th, P1);
Vh1 u, v;
Vh1 uExact = uExactFunc;

/* Bilinear form definition */
varf LaplaceBilinearForm(u,v) =
	int2d(Th)(
		dx(u) * dx(v) + dy(u) * dy(v)
		)
		+ on(labelIn, u = uIn);

/* Linear form definition */
varf RhsLinearForm(u,v) = 
	int2d(Th)(
	f * v)
		+int1d(Th, labelOutUp)(dudnExactFunc1 * v) /* Sign of integral depends on the sign of normal */
		-int1d(Th, labelOutDown)(dudnExactFunc1 * v) 
		-int1d(Th, labelOutLeft)(dudnExactFunc2 * v)
		+int1d(Th, labelOutRight)(dudnExactFunc2 * v)
		+ on(labelIn, u = uIn);

matrix A = LaplaceBilinearForm(Vh, Vh);
real[int] b = RhsLinearForm(0, Vh);
u[] = A^-1 * b; /*SLAE solution*/

Vh uErrorAbs = abs(u - uExact);
real uErrorL2Norm = sqrt(int2d(Th)(uErrorAbs^2));
cout << "||u - uExact|| = " << uErrorL2Norm << endl;

ofstream error("error.txt", append);

error << "i = " << i << " error = " << uErrorL2Norm << endl;

}