/* Boundary condition */
real uIn = 0.0;


/* Mesh definition */
int NN = 50 * 2;
int Nout = NN;
int NIn = NN;

int labelIn = 1; /* label of inner square */
int labelOutRight = 2; /* label of outter right side of square */
int labelOutUp = 3; /* label of outter up side of square */
int labelOutLeft = 4; /* label of outter left side of square */
int labelOutDown = 5; /* label of outter down side of square */


/* Outer border definition */
border DownOut(t = 0,1){x = 2 * pi * t; y = 0; label = labelOutDown;} 
border RightOut(t = 0,1){x = 2 * pi; y = 2 * pi * t; label = labelOutRight;}
border UpOut(t = 0,1){x = 2 * pi - 2 * pi * t; y = 2 * pi; label = labelOutUp;}
border LeftOut(t = 0,1){x = 0; y = 2 * pi - 2 * pi * t; label = labelOutLeft;}

/* Inner border definition */
border LeftIn(t = 0,1){x = pi / 2; y = pi / 2 + pi * t; label = labelIn; }
border UpIn(t = 0,1){x = pi / 2 + pi * t; y = 3 * pi / 2;  label = labelIn; }
border RightIn(t = 0,1){x = 3 * pi / 2; y = 3 * pi / 2 - pi * t;  label = labelIn; }
border DownIn(t = 0,1){x = 3 * pi / 2 - pi * t; y = pi / 2;  label = labelIn; }

plot(DownOut(NN) + RightOut(NN) + UpOut(NN) + LeftOut(NN) + LeftIn(NIn) + UpIn(NIn) + RightIn(NIn) + DownIn(NIn));

mesh Th = buildmesh(DownOut(NN) + RightOut(NN) + UpOut(NN) + LeftOut(NN)+ LeftIn(NIn) + UpIn(NIn) + RightIn(NIn) + DownIn(NIn));

plot(Th, wait = 1);
